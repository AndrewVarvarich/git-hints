pwd - Командная строка выведет путь к папке, в которой вы сейчас находитесь.

cd - сменить директорию |cd .. - переходим на уровень выше | cd github/open-source-project # переходим через несколько директорий

ls - отобразить содержимое директории | ls -a # вывели список, в котором отображаются скрытые файлы ., .. и .git

touch - создать файл при этом указать его расширение

mkdir - создать новую дирректорию | mkdir -p dir1/dir-inside/dir-deeper-inside # создали папку dir-deeper-inside в папке dir-inside, которая находится в папке dir1 

cp - копирование файлов | В простом виде cp принимает два параметра: что копируем и куда копируем. -- cp index.html src/ | Но можно указать сразу несколько файлов.
$ cp что_копируем что_копируем что_копируем куда_копируем

mv - Перемещение файлов и папок| mv table.csv ./very-important-files # сначала указываем имя файла, который хотим переместить, потом путь — куда перемещаем|

cat - чтение файлов| cat myfile.txt # распечатали содержимое файла myfile.txt | Команда cat работает только с текстовыми файлами.

rm - удалить файл| rm example.txt # удалили файл example.txt из текущей папки 

rmdir - удалить папку| rmdir images # команда удалит папку images из текущей директории, если папка images пуста

rm -r - если папка не пуста и ее все таки нужно удалить| rm -r images # удалили папку images со всем её содержимым из текущей директории  

&& - чтобы выполнить сразу несколько команд| 
mkdir second-project && cd second-project && touch index.html style.css
# создаём папку second-project,
# переходим в папку second-project
# и создаём в ней два файла: index.html и style.css 

Чтобы обратиться к последней введённой команде, нажмите на клавиатуре стрелку вверх (↑)

Автозаполнение в git происходит через TAB достаточно начать вводить команду и Git сам предложиит ее дописать, то же относится и к путям файлов
Если комманд на подходящее место более чем одна, то нужно вновь нажат TAB, тогда откроется полный список совпадающих команд

git config --global - служит для настройки гита|
В качестве значения user.name нужно указать своё имя или никнейм. Для настройки параметра user.email указывают электронную почту.|
|git config --global user.name "User Namovich" 
|# имя или ник нужно написать латиницей и в кавычках
|
|git config --global user.email username@yandex.ru
|# здесь нужно указать свой настоящий email 
Все глобальные настройки Git хранит в файле .gitconfig

cat ~/.gitconfig  -  чтобы прочитать все настройки гита

git config --list  - способ проверки настройки GITа, который покажет UserName и Email

git init - Сделать папку репозиторием|
|cd ~/dev/first-project # перешли в нужную папку
|
|$ git init # создали репозиторий 

rm -rf .git - удалиn подпапку .git Чтобы "Разгитить" папку

git status - Проверить состояние репозитория

git add - Подготовить файлы к сохранению

git add --all - Подготовить к сохранению все файлы в репозитории

git add . - Добавить всю текущую папку

git commit - Выполнить коммит

!!!Сделать коммит можно командой git commit c ключом -m (от англ. message — «сообщение»), который присваивает коммиту сообщение.!!! | $ git commit -m 'Мой первый коммит!'

git log - Просмотреть историю коммитов

!!!!!!!!!!!Проверка наличия SSH-ключа:
$ ls -la .ssh/ # вывели список созданных ключей 
Если папка пустая или её нет, всё в порядке. Если есть файлы с похожими названиями, SSH-ключи уже создавались:
id_dsa.pub;
id_ecdsa.pub;
id_ed25519.pub;
id_rsa.pub.
Если вы не создавали эти файлы, удалите их все.
|
V
$ ssh-keygen -t ed25519 -C "электронная почта, к которой привязан ваш аккаунт на GitHub" - Для генерации SSH-пары
||
$ ssh-keygen -t rsa -b 4096 -C "электронная почта, к которой привязан ваш аккаунт на GitHub" - если система не поддерживает алгоритм шифрования ed25519
|
V
После ввода отобразится такое сообщение: > Generating public/private rsa key pair. # сгенерированы публичный и приватный ключи
|
V  
!!!!Либо > Enter a file in which to save the key (C:\Users\<имя_пользователя>\.ssh\):[Press enter] - Простой вариант — сделать домашний каталог пользователя 
путём по умолчанию.
|
V  
На экране должны появиться два файла — один с расширением .pub, другой — без. Файл в .pub — публичный, им можно делиться с веб-сайтами или коллегами. 
Файл без расширения .pub — приватный. Ни в коем случае не передавайте его никому! 
|
V
После выполнения ssh-keygen в директории ~/.ssh есть два файла — id_ed25519 и id_ed25519.pub. Скопируйте содержимое файла с публичным ключом в буфер обмена.
 |# скопировать содержимое ключа в буфер обмена:
 |$ clip < ~/.ssh/id_rsa.pub
 |# для ed25519:
 |$ clip < ~/.ssh/id_ed25519.pub
|
V
Если clip не сработает, выведите содержимое файла с помощью cat ~/.ssh/id_rsa.pub или cat ~/.ssh/id_ed25519.pub и скопируйте вывод в буфер обмена из консоли. 
|
V
Перейдите на GitHub и выберите пункт Settings (англ. «настройки») в меню аккаунта
|
V
В меню слева нажмите на пункт SSH and GPG keys.
|
V
В открывшейся вкладке выберите New SSH key (англ. «новый SSH-ключ»).
|
V
В поле Title (англ. «заголовок») напишите название ключа. Например, Personal key (англ. «личный ключ»).
|
V
В поле Key type (англ. «тип ключа») должно быть Authentication Key (англ. «ключ аутентификации»).
|
V
В поле Key скопируйте ваш ключ из буфера обмена.
|
V
Нажмите на кнопку Add SSH key (англ. «добавить SSH-ключ»).
|
V
Проверьте правильность ключа с помощью следующей команды.
 $ ssh -T git@github.com

ВИДЕО В ПАПКЕ JAVA
___________________________________________________

git remote add - Привязать удалённый репозиторий к локальному | Перейдите на страницу удалённого репозитория, выберите тип SSH и скопируйте URL. 
Кнопка справа позволит сделать это мгновенно.
Откройте консоль, перейдите в каталог локального репозитория и введите команду git remote add
|cd ~/dev/first-project
|$ git remote add origin git@github.com:%ИМЯ_АККАУНТА%/first-project.git 

git remote -v - Убедиться, что репозитории связаны
|$ git remote -v
|origin    git@github.com:%ИМЯ_АККАУНТА%/%ИМЯ-ПРОЕКТА%.git (fetch)
|origin    git@github.com:%ИМЯ_АККАУНТА%/%ИМЯ-ПРОЕКТА%.git (push) 

git push - Отправить изменения на удалённый репозиторий | В первый раз эту команду нужно вызвать с флагом -u
|$ git push -u origin main # Если команда приведёт к ошибке, попробуйте 
                          # заменить main на master. 

git clone - Клонировать репозиторий
|$ git clone https://github.com/yandex-praktikum/git-clone-lesson # укажите адрес репозитория, который нужно склонировать (Нужно скопировать SSH ключ с GitHub)

Fork (англ. «развилка», «ответвление»), или «форк», — это GitHub-операция; 
напрямую с Git она не связана. «Форк» создаёт копию репозитория в аккаунте GitHub. Такая копия будет полностью независима. Изменения, которые вы внесёте, 
не будут синхронизированы с исходным репозиторием.
|
V
Теперь внесите изменения в новый репозиторий. Для начала скопируйте его локально.
$ git clone git@github.com:%ВАШ_АККАУНТ%/git-basics.git
# укажите адрес репозитория 

Все хеши и таблицу хеш → информация о коммите Git сохраняет в служебные файлы. Они находятся в скрытой папке .git в репозитории проекта.

git log --oneline - Сокращённый лог 

Файл HEAD — один из служебных файлов папки .git. Он указывает на коммит, который сделан последним (то есть на самый новый).